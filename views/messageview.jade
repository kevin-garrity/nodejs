extends layout

block content
	include partials/header_dashboard

	script(src="https://sdk.amazonaws.com/js/aws-sdk-2.1.45.min.js")
	!= css('upload_video.css')
	br
	br

	article#main
		header.special.container
			span.icon.fa-clock-o
			h2 #{worksession.name.athlete} - #{worksession.name.coach}
			p This page details your ongoing session together.

	- var val = 0 
	while val < messages.length
		if messages[val].status == 'unread' 
			- divClass = 'messages'
		else
			- divClass = 'messages unread-messages'
		
		if(messages[val].messageType == 'vrequest' && worksession.stage == 'video')
			if(user.role == 'Player')
				section.wrapper.style4.special.container(class="75%")
					p 
						| The first step is for you to send the coach some videos. Coach will take a look at the videos and send back a report with feedback. Please read the following message from the coach with instructions.
						hr
						blockquote #{messages[val].body}
						a.btn.btn-success(onclick='$("#upload_div").fadeIn();') + Upload Video(s)
						div#upload_div(style='display:none;')
							strong(style='font-size: 14px;') For now, you'll need a YouTube/Google account to upload videos. Sign in to upload -- all videos will be "unlisted".
							span#signinButton.pre-sign-in
								br
								br
								span.g-signin(data-callback='signinCallback', data-clientid='474818871991-uctoko6ei6bdiootsp7dgae16hgeg99h.apps.googleusercontent.com', data-cookiepolicy='single_host_origin', data-scope='https://www.googleapis.com/auth/youtube.upload https://www.googleapis.com/auth/youtube')
							div.post-signin
								div
									input#file(type='file', accept='video/*')
									a.btn.btn-warning#button Upload
									div.during-upload
										p
											| Uploading to youtube... 
											span#percent-transferred
											| % done 
										progress#upload-progress
									div.post-upload
										p 
											strong
												| Video is uploaded. Please wait while YouTube processes the video (this can take a while).
										span.glyphicon.glyphicon-refresh
										#processing
											i.fa-spinner.fa.fa-spin(style='font-size: 20px;')
										#post_upload(style='display: none;')
											| Video has been processed. Click "choose file" to upload another video.
									#player
									p#disclaimer
										| By uploading a video, you certify that you own all rights to the content or that you are authorized by the owner to make the content publicly available on YouTube, and that it otherwise complies with the YouTube Terms of Service located at 
										a(href="http://www.youtube.com/t/terms",target="_blank")
											| http://www.youtube.com/t/terms
						hr
						h5 Whenever you're ready, submit your videos.
						br
						form#video_form(method='POST', action='/submitVideo')
							input(type='hidden', name='_csrf', value=_csrf)
							input(type='hidden', name='sessionid', value='#{worksession.uniqueString}')
							input.btn.btn-primary#submit-videos(type='submit') 
			else
				div(class=divClass)
					h5 #{messages[val].name.athlete} is currently preparing his videos. You will be notified when they are posted here.

		else if(messages[val].messageType == 'videos')
			section.wrapper.style4.special.container(class="75%")
				- var videos = messages[val].body.split(",")
				- var x = 0
				h4 #{messages[val].name.athlete} has provided the following videos.
				hr
				- var videoWidth = 100/videos.length
				while x < videos.length
					iframe(width='#{videoWidth}%', height='200', frameborder='0', src='#{videos[x]}')
					- x++
		else if(messages[val].messageType =='rrequest' && worksession.stage == 'report')
			section.wrapper.style4.special.container(class="75%")
				if(user.role == 'Player')
					h5 The coach is currently preparing your report. You will be notified when it's ready for you.
				else
					h5 After you've written up your report, upload it here to send to the athlete. You can upload as many files as you want. 
					input(type="file", id="file-chooser")
					a.btn.btn-success(id="upload-button", style='margin-top: 10px;') Upload
					div(id="results")
					br
					form#document_form(method='POST', action='/submitReport')
						input(type='hidden', name='_csrf', value=_csrf)
						input(type='hidden', name='sessionid', value='#{worksession.uniqueString}')
						input.button.special(type='submit')
						#document
		else if (messages[val].messageType == "report")
			section.wrapper.style4.special.container(class="75%")
				h4 #{messages[val].name.coach} has provided the following analysis of your videos. The session is now over.
				- var documents = messages[val].body.split(",")
				- var x = 0
				hr
				while x < documents.length
					i.fa.fa-file.fa-2x
					h5 #{documents[x].split(".com")[1]}
					a.btn.btn-success(href="#{documents[x]}")
						i.fa.fa-download
						| Download
					br
					- x++

				

		- val++

		script.

			document.addEventListener('DOMContentLoaded', function () {

				console.log("Launch AWS credentials.");
				var roleArn = 'arn:aws:iam::260752771131:role/admin';
				var bucketName = 'projectpatterson';
				var fileArray = [];

				AWS.config.region = 'us-west-2';
				AWS.config.update({
				    accessKeyId: "AKIAIHTUXVFJM57SCNBA",
				    secretAccessKey: "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"
				});

				var bucket = new AWS.S3({

					params: {

						Bucket: bucketName,
						accessKeyId: "AKIAIHTUXVFJM57SCNBA",
						secretAccessKey: "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"

					}

				});

				var fileChooser = document.getElementById('file-chooser');
				var button = document.getElementById('upload-button');
				var results = document.getElementById('results');

				button.addEventListener('click', function () {

					var file = fileChooser.files[0];

					if (file) {


						//Object key will be facebook-USERID#/FILE_NAME

						var objKey = "#{worksession.uniqueString}" + file.name;

						var params = {

							Key: objKey,

							ContentType: file.type,

							Body: file,

							ACL: 'public-read'

						};

						bucket.putObject(params, function (err, data) {

							if (err) {

								results.innerHTML = 'ERROR: ' + err;

							} else {

								fileArray.push(file.name);
								console.log(fileArray);
								console.log($.unique(fileArray));
								var fileBody = "";
								$($.unique(fileArray)).each(function(el){
									 console.log(el);
									 fileBody += "<i class='fa fa-file'></i> <h5>" +  $.unique(fileArray)[el] + "</h5>";
								});
								results.innerHTML = fileBody;
								
							}

						});

					} else {

						results.innerHTML = 'Nothing to upload.';

					}

				}, false);

				function listObjs() {
					var prefix = "#{worksession.uniqueString}";
					bucket.listObjects({

						Prefix: prefix

					}, function (err, data) {
						if (err) {
							results.innerHTML = 'ERROR: ' + err;
						} else {
							var objKeys = "";
							console.log(data);
							data.Contents.forEach(function (obj) {
								objKeys += obj.Key + "<br>";
							});

						}
					});
				}
				function decodeEntities(encodedString) {
				    var textArea = document.createElement('textarea');
				    textArea.innerHTML = encodedString;
				    return textArea.value;
				}
				$("#document_form").submit(function(){
					var documents = "";
					$($.unique(fileArray)).each(function(el){
						documents += "<input type='hidden' name='documents[]' value='"+ decodeEntities($.unique(fileArray)[el]) +"'>";
					});
					$('#document').html(documents);
				});
			});



	script(src="//apis.google.com/js/client:plusone.js")
	!= js('cors_upload.js')
	!= js('upload_video.js')
